import os
import sys
import math
from snakemake.utils import min_version
import logging

# set logging level to info
logging.basicConfig(level=logging.INFO)
logging.info(
    "Running Snakemake version {} and python version {}".format(
        snakemake.__version__, ".".join([str(x) for x in sys.version_info[0:3]])
    )
)

min_version("7.32")

if sys.version_info[0] < 3 and sys.version_info[1] >= 12:
    raise Exception(
        "Snakemake is currently not compatible with Python >=3.12 due to a change in f-strings. Please downgrade your Python version to 3.11."
    )


MERYL = "/mmfs1/gscratch/stergachislab/mvollger/projects/k-mer-variant-phasing/bin/meryl-1.4/bin/"
shell.prefix(f"export PATH={MERYL}:$PATH; ")


CONDA = "../envs/env.yml"
# required
HIFI_BAM = config.pop("hifi_bam")
SAMPLE = config.pop("sample")
REFERENCE = config.pop("reference")
# optional
PAT_DATA = config.get("paternal", False)
MAT_DATA = config.get("maternal", False)
VCF = config.get("vcf", False)
K_MER_THREADS = config.get("k_mer_threads", 40)
K_MER_SIZE = config.get("k_mer_size", 31)
BIN_VERSION = config.get("BIN_VERSION", "1.5.0")
DEEPVARIANT = config.get("deepvariant", False)
ALIGN = config.get("align", False)
SV_CALLERS = config.get("variant_callers", True)
CLUSTER_PARTITION = config.get(
    "cluster_partition", "compute"
)  # can also be ckpt (checkpoint)
# inferted
NO_PARENTAL = PAT_DATA is False or MAT_DATA is False


wildcard_constraints:
    sm="|".join([SAMPLE]),
    hap="pat|mat",
    individual="mat|pat|pro",
    scatteritem="\d+-of-\d+",


localrules:
    deepvariant,
    deepvariant_merge,


include: "rules/common.smk"
include: "rules/align.smk"
include: "rules/vcf.smk"
include: "rules/variant_callers.smk"
include: "rules/kmer.smk"
include: "rules/hiphase.smk"
include: "rules/merge.smk"


if DEEPVARIANT:

    rule all:
        input:
            rules.deepvariant.input,

elif NO_PARENTAL:

    rule all:
        input:
            expand(rules.hiphase.output, sm=SAMPLE),
            get_sv_caller_outputs,

else:

    rule all:
        input:
            expand(rules.kmer_read_list.output, sm=SAMPLE),
            expand(rules.merge_kmer_and_variant_phasing.output, sm=SAMPLE),
            expand(rules.haplotaged_bam.output, sm=SAMPLE),
            expand(rules.haplotaged_bai.output, sm=SAMPLE),
            get_sv_caller_outputs,
