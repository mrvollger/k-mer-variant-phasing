import os
import sys
import math
from snakemake.utils import min_version

min_version("7.20")

MERYL = "/mmfs1/gscratch/stergachislab/mvollger/projects/k-mer-variant-phasing/bin/meryl-1.4/bin/"
HIPHASE = "/mmfs1/gscratch/stergachislab/mvollger/projects/k-mer-variant-phasing/bin/"
shell.prefix(f"export PATH={MERYL}:{HIPHASE}:$PATH; ")


CONDA = "fiberseq-smk"
CONDA = "../envs/env.yml"
PAT_DATA = config.pop("paternal")
MAT_DATA = config.pop("maternal")
HIFI_BAM = config.pop("hifi_bam")
VCF = config.pop("vcf")
SAMPLE = config.pop("sample")
REFERENCE = config.pop("reference")
K_MER_THREADS = config.pop("k_mer_threads", 40)
K_MER_SIZE = config.pop("k_mer_size", 31)
BIN_VERSION = config.get("BIN_VERSION", "1.5.0")
DEEPVARIANT = config.pop("deepvariant", False)


wildcard_constraints:
    sm="|".join([SAMPLE]),
    hap="pat|mat",
    individual="mat|pat|pro",


localrules:
    deepvariant,
    deepvariant_merge,


include: "rules/common.smk"
include: "rules/vcf.smk"
include: "rules/kmer.smk"
include: "rules/hiphase.smk"
include: "rules/merge.smk"


if DEEPVARIANT:

    rule all:
        input:
            rules.deepvariant.input,

else:

    rule all:
        input:
            expand(rules.kmer_read_list.output, sm=SAMPLE),
            expand(rules.merge_kmer_and_variant_phasing.output, sm=SAMPLE),
            expand(rules.haplotaged_bam.output, sm=SAMPLE),
            expand(rules.haplotaged_bai.output, sm=SAMPLE),
