import os
import sys
import math
from snakemake.utils import min_version

# set logging level to info
msg = "Running Snakemake version {} and python version {}".format(
    snakemake.__version__, ".".join([str(x) for x in sys.version_info[0:3]])
)
print(msg, file=sys.stderr)

min_version("8.4")

MERYL = "/mmfs1/gscratch/stergachislab/mvollger/projects/k-mer-variant-phasing/bin/meryl-1.4/bin/"
shell.prefix(f"export PATH={MERYL}:$PATH; ")

# assert that people use shared conda and apptainer directories
if config.get("skip_checks", False):
    print(
        "Skipping check for shared conda and apptainer directories. This may cause unnecessary conda/apptainer installations and potentially other issues.",
        file=sys.stderr,
    )
else:
    for key in ["SNAKEMAKE_CONDA_PREFIX", "APPTAINER_CACHEDIR"]:
        val = os.environ.get(key)
        if (val is None or val == "") and not config.get("skip_checks", False):
            raise ValueError(
                f"{key} is not set in the environment which will cause unnecessary conda/apptainer installations and potentially other issues. If you want to skip this check, set skip_checks: True in the config file."
            )


CONDA = "../envs/env.yml"
# required
HIFI_BAM = config.pop("hifi_bam")
SAMPLE = config.pop("sample")
REFERENCE = config.pop("reference")
# optional
PAT_DATA = config.get("paternal", False)
MAT_DATA = config.get("maternal", False)
VCF = config.get("vcf", False)
K_MER_THREADS = config.get("k_mer_threads", 40)
K_MER_SIZE = config.get("k_mer_size", 31)
BIN_VERSION = config.get("BIN_VERSION", "1.6.1")
BIN_VERSION = config.get("BIN_VERSION", "1.8.0")
DEEPVARIANT = config.get("deepvariant", False)
ALIGN = config.get("align", False)
SV_CALLERS = config.get("variant_callers", True)
# inferted
NO_PARENTAL = PAT_DATA is False or MAT_DATA is False


wildcard_constraints:
    sm=r"|".join([SAMPLE]),
    hap=r"pat|mat",
    individual=r"mat|pat|pro",
    scatteritem=r"\d+-of-\d+",


localrules:
    deepvariant,
    deepvariant_merge,


include: "rules/common.smk"
include: "rules/align.smk"
include: "rules/vcf.smk"
include: "rules/variant_callers.smk"
include: "rules/kmer.smk"
include: "rules/hiphase.smk"
include: "rules/merge.smk"


if DEEPVARIANT:

    rule all:
        input:
            rules.deepvariant.input,

elif NO_PARENTAL:

    rule all:
        input:
            expand(rules.hiphase.output, sm=SAMPLE),
            expand(rules.hiphase_vcf.output, sm=SAMPLE),
            get_sv_caller_outputs,

else:

    rule all:
        input:
            expand(rules.kmer_read_list.output, sm=SAMPLE),
            expand(rules.merge_kmer_and_variant_phasing.output, sm=SAMPLE),
            expand(rules.haplotagged_bam.output, sm=SAMPLE),
            expand(rules.haplotagged_bai.output, sm=SAMPLE),
            expand(rules.haplotagged_vcf.output, sm=SAMPLE),
            expand(rules.haplotagged_vcf_index.output, sm=SAMPLE),
            expand(rules.haplotagged_gvcf.output, sm=SAMPLE),
            get_sv_caller_outputs,
